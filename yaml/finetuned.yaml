apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: finetuned
  name: finetuned
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: finetuned
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: finetuned
    spec:
      affinity: {}
      containers:
      - name: server
        # args:
        # - --model
        # - rh-rad-ai-roadshow/parasol-chat-ilab19-test
        # - --download-dir
        # - /models-cache
        # - --dtype
        # - float16
        # - --max-model-len
        # - "4096"
        command:
        - bash
        - "-c"
        - |
          GPU_COUNT="$(echo -n $NVIDIA_VISIBLE_DEVICES | awk -F, '{ print NF }')"
          if [ -z "$GPU_COUNT" ]; then
            GPU_COUNT=1
          fi
          echo "number of gpus=$GPU_COUNT"
          echo "args=$@"
          exec python3 -m vllm.entrypoints.openai.api_server \
            --port 8080 \
            --model $MODEL \
            --tensor-parallel-size $GPU_COUNT
        env:
        - name: MODEL
          value: rh-rad-ai-roadshow/parasol-chat-ilab19-test
        - name: HUGGING_FACE_HUB_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: hftoken
        - name: HOME # needed because we need to write to $HOME/.cache
          value: /root
        - name: PYTHONPATH
          value: /workspace
        #image: quay.io/rh-aiservices-bu/vllm-openai-ubi9:0.4.2
        image: docker.io/vllm/vllm-openai:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /version
            port: http
            scheme: HTTP
          periodSeconds: 100
          successThreshold: 1
          timeoutSeconds: 8
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /version
            port: http
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "8"
            memory: 24Gi
            nvidia.com/gpu: "1"
          requests:
            cpu: "6"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          failureThreshold: 24
          httpGet:
            path: /version
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: home
          mountPath: /root
        - mountPath: /dev/shm
          name: shm
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 120
      tolerations:
      - effect: NoSchedule
        key: nvidia.com/gpu
        operator: Exists
      volumes:
      - name: home
        emptyDir: {}
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: shm
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: finetuned
  name: finetuned
spec:
  clusterIP: None
  clusterIPs:
  - None
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  selector:
    app: finetuned
  sessionAffinity: None
  type: ClusterIP
status: {}
